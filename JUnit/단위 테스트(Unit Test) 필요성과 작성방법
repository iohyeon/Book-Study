도서참고
- 자바와 JUnit을 활용한 실용주의 단위 테스트
- 테스트 주도 개발
- 클린코드 

# ****[TDD] 단위 테스트(Unit Test) 작성의 필요성****

## **1. 단위 테스트 vs 통합 테스트 차이**

---

### **[ 단위 테스트(Unit Test) ]**

단위 테스트(Unit Test)는 하나의 모듈을 기준으로 독립적으로 진행되는 가장 작은 단위의 테스트이다. 여기서 모듈은 애플리케이션에서 작동하는 하나의 기능 또는 메소드로 이해할 수 있다. 예를 들어 웹 애플리케이션에서 로그인 메소드에 대한 독립적인 테스트가 1개의 단위테스트가 될 수 있다.

즉, 단위 테스트는 애플리케이션을 구성하는 하나의 기능이 올바르게 동작하는지를 독립적으로 테스트하는 것으로, "어떤 기능이 실행되면 어떤 결과가 나온다" 정도로 테스트를 진행한다.

### **[ 통합 테스트(Integration Test) ]**

통합 테스트(Integration Test)는 모듈을 통합하는 과정에서 모듈 간의 호환성을 확인하기 위해 수행되는 테스트이다.

일반적으로 애플리케이션은 여러 개의 모듈들로 구성이 되고, 모듈들끼리 메세지를 주고 받으면서(함수 호출) 기능을 수행한다. 그렇기에 통합된 모듈들이 올바르게 연계되어 동작하는지 검증이 필요한데, 이러한 목적으로 진행되는 테스트가 통합 테스트이다. 그렇기에 통합 테스트는 독립적인 기능에 대한 테스트가 아니라 웹 페이지로부터 API를 호출하여 올바르게 동작하는 지를 확인하는 것이다.

## **2. 단위 테스트(Unit Test) 작성의 필요성**

---

### **[ 단위 테스트(Unit Test) 작성의 필요성 ]**

일반적으로 실무에서 테스트 코드를 작성한다고 하면 거의 단위 테스트를 의미한다. 통합 테스트는 실제 여러 컴포넌트들 간의 상호작용을 테스트하기 때문에 모든 컴포넌트들이 구동된 상태에서 테스트를 하게 된다. 그렇기에 통합 테스트를 위해서는 캐시나 데이터베이스 등 다른 컴포넌트들과 실제 연결을 해야 하고, 시스템을 구성하는 컴포넌트들이 많아질수록 테스트를 위한 비용(시간)이 상당히 커진다. 반면에 단위 테스트는 해당 부분만 독립적으로 테스트하기 때문에 어떤 코드를 리팩토링하여도 빠르게 문제 여부를 확인할 수 있다.

- 테스팅에 대한 시간과 비용을 절감할 수 있다.
- 새로운 기능 추가 시에 수시로 빠르게 테스트 할 수 있다.
- 리팩토링 시에 안정성을 확보할 수 있다.
- 코드에 대한 문서가 될 수 있다.

그렇기 때문에 실무에서는 단위 테스트를 선호하며, 요즘 많이 사용되는 TDD(Test-Driven Development, 테스트 주도 개발) 에서 얘기하는 테스트도 단위 테스트를 의미한다. 우리는 우리가 작성한 테스트 코드를 수시로 빠르게 돌리면서 문제를 파악할 수 있다.

### **[ 단위 테스트의 문제점과 Stub ]**

어떤 객체가 자체적으로 모든 일을 처리한다면 문제가 없겠지만, 일반적인 애플리케이션에서는 1개의 기능을 처리하기 위해 다른 객체들과 메세지를 주고 받아야 한다. 하지만 앞서 설명하였듯 단위 테스트는 해당 모듈에 대한 독립적인 테스트이기 때문에 다른 객체와 메세지를 주고 받는 경우에 문제가 발생한다. 그렇기 때문에 다른 객체 대신에 가짜 객체(Mock Object)를 주입하여 어떤 결과를 반환하라고 정해진 답변을 준비시켜야 하는데, 이를 stub이라고 한다.

예를 들어 데이터베이스에 새로운 데이터를 추가하는 코드를 테스트한다고 하면, 가짜 데이터베이스(Mock Database)를 주입하여 insert 처리 시에 반드시에 1을 반환하도록 해주는 것이 stub이다.

### **[ 좋은 단위 테스트의 특징 ]**

일반적으로 요구 사항은 계속해서 변하고, 그에 맞춰 우리의 코드 역시 변경되어야 한다. 하지만 실제 코드를 변경한다는 것은 잠재적인 버그가 발생할 수 있음을 내포하는데, 좋은 테스트 코드가 있다면 변경된 코드를 검증함으로써 이를 해결할 수 있다. 또한 실제 코드가 변경되면 테스트 코드 역시 변경이 필요할 수 있는데, 이러한 이유로 우리는 테스트 코드 역시 가독성있게 작성할 필요가 있다.

그렇기에 테스트를 작성하는 경우에는 다음을 준수하는 것이 좋다.

1. 1개의 테스트 함수에 대해 assert를 최소화하라
2. 1개의 테스트 함수는 1가지 개념 만을 테스트하라

또한 좋고 깨끗한 테스트 코드는 **FIRST라는 5가지 규칙**을 따라야 한다.

1. `Fast`: 테스트는 빠르게 동작하여 자주 돌릴 수 있어야 한다.
2. `Independent`: 각각의 테스트는 독립적이며 서로 의존해서는 안된다.
3. `Repeatable`: 어느 환경에서도 반복 가능해야 한다.
4. `Self-Validating`: 테스트는 성공 또는 실패로 bool 값으로 결과를 내어 자체적으로 검증되어야 한다.
5. `Timely`: 테스트는 적시에 즉, 테스트하려는 실제 코드를 구현하기 직전에 구현해야 한다.

( 위 목록 CleanCode 책에서 참고한 내용)

실제로 회사의 다른 부서에서 테스트 코드를 작성하는 것을 보았는데, 단위 테스트라는 이름 아래에 Spring의 모든 빈을 띄우는 모습을 볼 수 있었습니다. 작성한 테스트를 실행하는데는 몇 분의 시간이 소요되었고, 이렇게 오랜 시간이 걸리는 테스트를 지켜보면서 단위 테스트의 장점이 빛을 바래는 것을 느낄 수 있었습니다.

개인적으로 단위 테스트의 가장 큰 장점은 내가 개발한 것들을 빠르게 검증받는 것이라고 생각합니다. 단위 테스트를 통해 내가 개발한 코드를 바로 검증받고, 테스트를 통과하지 못하면 코드를 수정해 또 다시 빠르게 검증받는 것입니다. 이렇게 테스트를 작성하고 수시로 실행하며 검증하면서 버그를 잡고 개발 비용을 줄어나갈 때 테스트의 가치를 느낄 수 있었습니다.

물론 프로토타입 또는 PoC 성향의 프로젝트라면 단위 테스트를 작성하지 않을 수도 있습니다. 반면에 신규로 개발된 프로젝트이거나 계속해서 기능이 추가되고 유지보수가 필요한 프로젝트라면 단위 테스트를 작성하는게 좋을 것 같습니다. 만약 해당 프로젝트가 이미 구현되어있는 상태라도 늦게나마 단위 테스트를 작성하는 것은 이후에 작업하는데 도움을 줄 것입니다!

Java에서 독립된 단위테스트 (Unit test)를 지원해주는 프레임워크.* 단위테스트란?

특정 소스코드의 모듈이 의도한 대로 작동하는지 검증하는 테스트이다.

즉, 함수 및 메소드에 대한 테스트를 하는 작업.

Spring에서 단위테스트를 하는것은 스프링 커네이너에 올라와있는 Bean들을 테스트 하는 것이다.

Junit을 사용하면 스프링 컨테이너를 띄워, 그 위에 올라가있는 Bean을 테스트 할 수 있

### **JUnit 특징**

- 단정 메서드(assert)로 테스트 케이스의 수행결과를 판별.

ex) assertEquals(예상값, 실제값)

assert()는 junit의 대표적인 기능이다. 이 메소드를 사용하여 테스트가 정상인지 아닌지 판별한다.

- Junit 4부터는 테스트 어노테이션을 제공

ex) @Test @Before @After

- 각 @Test 어노테이션 메서드 호출 시 새로운 인스턴스를 생성하여 독립적인 테스트가 이루어지도록 함.

### **JUnit 테스트 어노테이션**

### @Test

- 메서드에 @Test를 선언 : 테스트를 수행하는 메소드라는 의미

- JUnit은 각각의 테스트가 서로 영향을 주지않고 독립적으로 실행되는 것을 원칙으로 하기때문에 @Test메소드마다 객체를 별도로 생성한다.

### @Before

- @Before 어노테이션이 선언된 메소드는 **@Test 메소드가 실행되기 전 반드시 실행**한다.

- 보통 공통으로 사용되는 set-up 코드를 @Before메소드에 선언한다. @Before은 각 메서드 전에 실행되는데, 같은 환경에서 여러 메소드를 테스트하는 경우 단위테스트 전체 수행 전 @BeforeClass 어노테이션 선언으로 1번만 선언하면 된다

### @After

- @After 어노테이션이 선언된 메소드는 **@Test 메소드가 실행된 후 반드시 실행**한다. 마찬가지로 전체 수행 후에는 @AfterClass 어노테이션 선언

### @Ignore

- @Ignore 어노테이션을 선언하면 테스트를 Skip한다.

### **Spring-Test에서 테스트를 지원하는 어노테이션**

**@RunWith(SpringJUnit4ClassRunner.class)**

- SpringRunner클래스는 JUnit Test에서 Spring Application Context 에 빈을 등록하고 @Autowired 어노테이션을 지원한다.

**@ContextConfiguration({"파일경로"})**

- 스프링 빈 설정파일의 위치를 지정하는 어노테이션

ex) @ContextConfiguration({"classpath:config/*.xml"})

파라미터로 스프링 빈 설정파일 경로를 넣어주면, 테스트 케이스를 실행할때 마다 설정파일을 로딩시켜준다.

**@Autowired**

- 스프링 의존성주입(DI)을 대신해준다.
- 해당 변수에 자동으로 빈을 매핑해 준다.

# ****JUnit을 활용한 Java 단위 테스트 코드 작성법****

## **1. Java 단위 테스트(Unit Test) 작성 준비**

---

**[ 필요한 라이브러리 ]**

요즘 Java 단위테스트 작성에는 크게 2가지 라이브러리가 사용된다.

- JUnit5: 자바 단위 테스트를 위한 테스팅 프레임워크
    - junit을 사용하기 위해 pom.xml에 Dependency 추가.(환경에 따라 맞는 버전으로 추가 후 메이븐 업데이트)
    
    ([https://mvnrepository.com/artifact/junit/junit/4.13.2](https://mvnrepository.com/artifact/junit/junit/4.13.2))
    
    ```xml
    <dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>5.13.2</version>
    <scope>test</scope>
    </dependency>
    ```
    
    - 실행방법
        1. src/test/java
        
        이하에 테스트 패키지를 생성후, 테스트 클래스 생성.
        
        1. 테스트 메소드 작성.
        
        스프링 컨테이너 객체 생성, 빈 의존성 주입 작업 후, 테스트할 메소드를 호출한 리턴값을 assert()로 검사한다.
        
        (system out으로 console에 찍어볼수도 있겠다)
        
        1. 테스트 실행
        
        테스트하고자 하는 메소드에 @Test 어노테이션을 선언해주면 파일 우클릭> Run as > Junit Test 버튼이 활성화 된다.
        
        ![https://blog.kakaocdn.net/dn/QRywd/btrDXnDqYi3/jnAFRbQL0DisRcGTR4RJbk/img.png](https://blog.kakaocdn.net/dn/QRywd/btrDXnDqYi3/jnAFRbQL0DisRcGTR4RJbk/img.png)
        
        성공 시 결과화면 ) 녹색 바로 표시.
        
        ![https://blog.kakaocdn.net/dn/cex29H/btrDWEeydPL/fod9RsiSueDncZNkncLSk0/img.jpg](https://blog.kakaocdn.net/dn/cex29H/btrDWEeydPL/fod9RsiSueDncZNkncLSk0/img.jpg)
        
        에러 시 결과화면 ) 적색 바와 에러로그 표시.
        
        ![https://blog.kakaocdn.net/dn/b8AEos/btrDWUaoSEe/Nb8bBfOufVAVJe8YbwXEL1/img.jpg](https://blog.kakaocdn.net/dn/b8AEos/btrDWUaoSEe/Nb8bBfOufVAVJe8YbwXEL1/img.jpg)
        
- AssertJ: 자바 테스트를 돕기 위해 다양한 문법을 지원하는 라이브러리

JUnit 만으로도 단위 테스트를 충분히 작성할 수 있다. 하지만 JUnit에서 제공하는 assertEquals()와 같은 메소드는 AssertJ가 주는 메소드에 비해 가독성이 떨어진다. 그렇기 때문에 순수 Java 애플리케이션에서 단위 테스트를 위해 JUnit5와 AssertJ 조합이 많이 사용된다.

**[ given/when/then 패턴 ]**

요즘 단위테스트는 거의 given-when-then 패턴으로 작성하는 추세이다. given-when-then 패턴이란 1개의 단위 테스트를 3가지 단계로 나누어 처리하는 패턴으로, 각각의 단계는 다음을 의미한다.

- given(준비): 어떠한 데이터가 준비되었을 때
- when(실행): 어떠한 함수를 실행하면
- then(검증): 어떠한 결과가 나와야 한다.

추가적으로 어떤 메소드가 몇번 호출되었는지를 검사하기 위한 verify 단계도 사용하는 경우가 있는데, 그렇게 실용성이 크지 않으므로 메소드의 호출 횟수가 중요한 테스트에서만 선택적으로 사용하면 될 것 같다.

**[ 테스트 코드 작성 공통 규칙 ]**

```java
@DisplayName("로또 번호 갯수 테스트")
@Test
void lottoNumberSizeTest() {
// given

// when

// then
}
```

@Test는 해당 메소드가 단위 테스트임을 명시하는 어노테이션이다. JUnit은 테스트 패키지 하위의 @Test 어노테이션이 붙은 메소드를 단위 테스트로 인식하여 실행시킨다. 이 상태로 실행하면 테스트 이름이 함수 이름이 default로 지정되는데, 우리는 @DisplayName 어노테이션을 사용하여 읽기 좋은 다른 이름을 부여할 수 있다.

![https://blog.kakaocdn.net/dn/cced6S/btq3VhZsUcN/u6gfl628Jo1vjv2pm2mI61/img.png](https://blog.kakaocdn.net/dn/cced6S/btq3VhZsUcN/u6gfl628Jo1vjv2pm2mI61/img.png)

또한 테스트 코드는 앞서 설명한 given-when-then 구조로 흔히 작성되는데, 단위 테스트 내에 주석으로 이 단계를 명시해주면 읽기 좋은 테스트 코드를 작성할 수 있다. (IntelliJ를 사용중이라면 live template를 직접 설정해 빠르게 작성할 수 있다.)

## **2. 단위 테스트 작성 예시**

---

### **[ 로또 생성기 Java 코드 ]**

예를 들어 다음과 같이 1000원을 주면 1개의 로또를 생성해주는 클래스가 있다고 하자.

```java
public class LottoNumberGenerator {

    public List<Integer> generate(final int money) {
        if (!isValidMoney(money)) {
            throw new RuntimeException("올바른 금액이 아닙니다.");
        }
        return generate();
    }

    private boolean isValidMoney(final int money) {
        return money == 1000;
    }

    private List<Integer> generate() {
        return new Random()
                .ints(1, 45 + 1)
                .distinct()
                .limit(6)
                .boxed()
                .collect(Collectors.toList());
    }

}
```

위와 같은 로또 번호 생성 코드에 대한 테스트 코드들을 작성해보도록 하자.

1. 로또 번호 갯수 테스트
2. 로또 번호 범위 테스트
3. 잘못된 로또 금액 테스트

### **[ 1. 로또 번호 갯수 테스트 ]**

우선 로또를 생성받기 위해서는 로또 생성기 객체와 금액이 필요하다. 그렇기에 given 단계에서는 LottoNumberGenerator 객체와 금액을 적어주면 된다.

```java
@DisplayName("로또 번호 갯수 테스트")
@Test
void lottoNumberSizeTest() {
// given
    final LottoNumberGenerator lottoNumberGenerator = new LottoNumberGenerator();
    final int price = 1000;

// when

// then
}
```

준비가 끝났으면 주어진 금액을 지불하여 로또를 받아야 한다. 이에 대한 when 단계의 코드를 작성하면 다음과 같다.

```java
@DisplayName("로또 번호 갯수 테스트")
@Test
void lottoNumberSizeTest() {
// given
    final LottoNumberGenerator lottoNumberGenerator = new LottoNumberGenerator();
    final int price = 1000;

// when
    final List<Integer> lottoNumber = lottoNumberGenerator.generate(price);

// then
}
```

이제 최종적으로 우리가 받은 로또가 6개의 숫자를 갖는지 검증해야 한다. 이에 대한 테스트 코드를 작성하면 다음과 같다.그리고 위와 동일하게 다른 테스트 코드들도 다음과 같이 작성을 할 수 있다.

```java
@DisplayName("로또 번호 갯수 테스트")
@Test
void lottoNumberSizeTest() {
// given
    final LottoNumberGenerator lottoNumberGenerator = new LottoNumberGenerator();
    final int price = 1000;

// when
    final List<Integer> lottoNumber = lottoNumberGenerator.generate(price);

// then
    assertThat(lotto.size()).isEqualTo(6);
}
```

### **[ 2. 로또 번호 범위 테스트 ]**

이번에는 모든 로또 숫자가 1에서 45사이의 숫자인지를 boolean 값으로 검사하므로, AssertJ의 isTrue() 문법이 사용되었다. 그 외에도 isFalse(), isNull(), isNotNull() 등의 메소드가 있다.

```java
@DisplayName("로또 번호 범위 테스트")
@Test
void lottoNumberRangeTest() {
// given
    final LottoNumberGenerator lottoNumberGenerator = new LottoNumberGenerator();
    final int price = 1000;

// when
    final List<Integer> lotto = lottoNumberGenerator.generate(price);

// then
    assertThat(lotto.stream().allMatch(v -> v >= 1 && v <= 45)).isTrue();
}
```

### **[ 3. 잘못된 로또 금액 테스트 ]**

마지막으로 잘못된 금액이 발생한 경우, Runtime Exception이 발생하는 코드에 대해 테스트를 해야 한다. 예외가 발생하는 경우에는 when 단계에서 assertThrows()로 감싸서 처리를 해야 한다.

```java
@DisplayName("잘못된 로또 금액 테스트")
@Test
void lottoNumberInvalidMoneyTest() {
// given
    final LottoNumberGenerator lottoNumberGenerator = new LottoNumberGenerator();
    final int price = 2000;

// when
    final RuntimeException exception = assertThrows(RuntimeException.class, () -> lottoNumberGenerator.generate(price));

// then
    assertThat(exception.getMessage()).isEqualTo("올바른 금액이 아닙니다.");
}
```

이전 코드들과 다르게 금액을 2000원으로 변경하였고, 실행하는 메소드를 assertThrows()로 감싸 주었다.

간단한 자바 애플리케이션이라서 어떤 메소드가 다른 객체와 메세지를 주고 받을 필요가 없는 경우라면 단위 테스트 작성이 간단하다. 하지만 일반적인 애플리케이션은 상당히 복잡하고, 여러 객체들이 메세지를 주고 받는다.

그렇기에 Spring과 같은 웹 애플리케이션에서는 어떻게 단위 테스트를 작성하는지에 대해 알아볼 필요가 있다.

## 3.  **서비스 단 - DB연결 단위 테스트 해보기**

---

여기서는 스프링 기본구조인 controller-service-dao가 아닌, 서비스 단에서 디비까지 정상적으로 연결 및 소스에 문제가 없는지

서비스 모듈을 테스트 한다. (service <-> dao <->DB)

테스트 클래스를 만들어서 테스트하고자 하는 서비스를 호출해서 결과값이 system out으로 잘 찍히는지 테스트 해 보겠다.

- 테스트 클래스: Test.class
- 테스트 할 서비스: junitTestService.class 내의 selectDate() 모듈.

junitTestService class 의 selectDate()에서는 dao를 호출하여, 현재 날짜를 구하는 쿼리를 날린다고 가정한다.

예제소스)

```kotlin
@RunWith(StringJUnit4ClassRunner.class)//스프링컨테이너 생성 및 관리@ContextConfiguration({"classpath:config/*.xml"})//설정 파일 로딩public class Test{

 @Autowited
 junitTestService test;//테스트 하고자하는 서비스 DI

 @Test
 public void testSelect(){
   String result = test.selectDate();
   System.out.println("result:"+ result);
 }

}
```

```yaml
result: 20220505
```

- 스프링 컨테이너 객체 수동 생성

```ebnf
ApplicationContext appContext = new ClassPathXmlApplicationContext("classpath:config/*.xml");
```

> 요부분을 @Runwith(SpringJUnit4classRunner.class) 와 @contextConfiguration({classpath:config/*.xml}) 어노테이션이 대신 해준다.

- 서비스 수동 의존주입

```
testService test = appContext.getBean("testService", testService.class);//DI
```

> @Autowired 어노테이션이 대신 해준다.

그렇다면, 어노테이션없이 수동으로 설정해보자.

```java
public class Test{
 @Test
 public void testSelect(){

//스프링 컨테이너 객체 생성 (@RunWith / @ContextConfiguration)
  ApplicationContext appConxt = new ClassPathXmlApplicationContext("classpath:config/*.xml");
//테스트 서비스 의존 주입 (@Autowired)
  junitTestService test = appConxt.getBean(junitTestService.class);

   String result = test.selectDate();
   System.out.println("result:"+ result);
 }

}

```

```yaml
result: 20220505
```

같은 결과가 나오는 것을 확인 할 수 있다.

예제소스에서는 select 메소드이기 때문에 결과값을 찍어볼 수 있지만, insert/update/delete 메소드의 경우 결과값이 count로 리턴되기 때문에 실패 시 0, 1이상 성공으로 체크하였고, 에러가 발생하는 경우 로그가 남기 때문에 어느 부분에서 에러가 발생하는지 확인 할 수 있다. (log4j.xml 설정필요)

확실히 수동방식보다 어노테이션을 사용하면 소스가 확 줄어드는 것을 확인할 수 있다. 이렇게 스프링 어노테이션은 개발자의 일을 덜어준다. 보통은 웹개발을 주로 하면서 거의 controller - view 가 존재 했기 때문에 화면단에서 테스트를 진행하는 경우가 많았는데 모듈 단독 개발을 하면서 jUnit 테스트를 활용해보았다.

# ****JUnit과 Mockito 기반의 Spring 단위 테스트 코드 작성법****

## **1. Mockito 소개 및 사용법**

---

### [****Mockito 필요성]****

Mockito 덕분에 DB에 의존하지 않고 테스트를 완료했다. DB에 접근하지 않고 필요한 컨텍스트만을 호출해 사용하기 때문에 테스트도 빠르게 실행할 것이다.

테스트 하기 어려운 부분을 Mock 객체로 대체해 **테스트하려는 부분에 집중**할 수 있다. 간혹 복잡할 수 있는 **의존성을 간소화** 시키고, **테스트 실행 속도를 향상** 시킨다.

Mockito 덕분에 DB에 의존하지 않고 테스트를 완료했다. DB에 접근하지 않고 필요한 컨텍스트만을 호출해 사용하기 때문에 테스트도 빠르게 실행할 것이다.

### **[ Mockito란? ]**

Mockito는 개발자가 동작을 직접 제어할 수 있는 가짜(Mock) 객체를 지원하는 테스트 프레임워크이다. 일반적으로 Spring으로 웹 애플리케이션을 개발하면, 여러 객체들 간의 의존성이 생긴다. 이러한 의존성은 단위 테스트를 작성을 어렵게 하는데, 이를 해결하기 위해 가짜 객체를 주입시켜주는 Mockito 라이브러리를 활용할 수 있다. Mockito를 활용하면 가짜 객체에 원하는 결과를 Stub하여 단위 테스트를 진행할 수 있다. 물론 Mock을 하지 않아도 된다면 하지 않는 것이 가장 좋다.

### **[ Mockito 사용법 ]**

### **1. Mock 객체 의존성 주입**

Mockito에서 Mock(가짜) 객체의 의존성 주입을 위해서는 크게 3가지 어노테이션이 사용된다.

- @Mock: Mock 객체를 만들어 반환해주는 어노테이션
- @Spy: Stub하지 않은 메소드들은 원본 메소드 그대로 사용하는 어노테이션
- @InjectMocks: @Mock 또는 @Spy로 생성된 가짜 객체를 자동으로 주입시켜주는 어노테이션

예를 들어 UserController에 대한 단위 테스트를 작성하고자 할 때, UserService를 사용하고 있다면 @Mock 어노테이션을 통해 가짜 UserService를 만들고, @InjectMocks를 통해 UserController에 이를 주입시킬 수 있다.

### **2. Stub로 결과 처리**

앞서 설명하였듯, 의존성이 있는 객체는 가짜 객체(Mock Object)를 주입하여 어떤 결과를 반환하라고 정해진 답변을 준비시켜야 한다. Mockito에서는 다음과 같은 stub 메소드를 제공한다.

- doReturn(): Mock 객체가 특정한 값을 반환해야 하는 경우
- doNothing(): Mock 객체가 아무 것도 반환하지 않는 경우(void)
- doThrow(): Mock 객체가 예외를 발생시키는 경우

### **3. Mockito와 Junit의 결합**

Mockito도 테스팅 프레임워크이기 때문에 JUnit과 결합되기 위해서는 별도의 작업이 필요하다. 기존의 JUnit4에서 Mockito를 활용하기 위해서는 클래스 어노테이션으로 @RunWith(MockitoJUnitRunner.class)를 붙여주어야 연동이 가능했다. 하지만 SpringBoot 2.2.0부터 공식적으로 JUnit5를 지원함에 따라, 이제부터는 @ExtendWith(MockitoExtension.class)를 사용해야 결합이 가능하다.

## **2. Spring 컨트롤러 단위 테스트 작성 예시**

---

### **[ 사용자 회원가입/목록 조회 API ]**

예를 들어 다음과 같은 회원 가입 API와 사용자 목록 조회 API가 있고, 이에 대한 단위 테스트를 작성해주어야 한다고 하자.

```java
@RestController
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    @PostMapping("/users/signUp")
    public ResponseEntity<UserResponse> signUp(@RequestBody SignUpRequest request) {
        return ResponseEntity.status(HttpStatus.CREATED)
            .body(userService.signUp(request));
    }

    @GetMapping("/users")
    public ResponseEntity<List<UserResponse>> findAll() {
        return ResponseEntity.ok(userService.findAll());
    }
}
```

### **단위 테스트(Unit Test) 작성 준비**

앞서 설명하였듯 JUniit5와 Mockito를 연동하기 위해서는 @ExtendWith(MockitoExtension.class)를 사용해야 한다. 이를 클래스 어노테이션으로 붙여 다음과 같이 테스트 클래스를 작성할 수 있다.

```java
@ExtendWith(MockitoExtension.class)
class UserControllerTest {

}
```

이제 의존성 주입을 해주어야 한다. 먼저 테스트 대상인 UserController에는 가짜 객체 주입을 위한 @InjectMocks를 붙여주어야 한다. 그리고 UserService에는 가짜 Mock 객체 생성을 위해 @Mock 어노테이션을 붙여주면 된다.

```java
@ExtendWith(MockitoExtension.class)
class UserControllerTest {

    @InjectMocks
    private UserController userController;

    @Mock
    private UserService userService;

}
```

컨트롤러를 테스트하기 위해서는 HTTP 호출이 필요하다. 일반적인 방법으로는 HTTP 호출이 불가능하므로 스프링에서는 이를 위한 MockMVC를 제공하고 있다. MockMvc는 다음과 같이 생성할 수 있다.

```java
@ExtendWith(MockitoExtension.class)
class UserControllerTest {

    @InjectMocks
    private UserController userController;

    @Mock
    private UserService userService;

    private MockMvc mockMvc;

    @BeforeEach
    public void init() {
        mockMvc = MockMvcBuilders.standaloneSetup(userController).build();
    }

}
```

그러면 이제 UserController 테스트를 위한 준비가 끝났으므로, 다음의 케이스들에 대해 테스트 코드를 작성해주도록 하자.

1. 회원가입 성공
2. 사용자 목록 조회

### **1. 회원가입 성공 테스트**

우선 회원가입 요청을 보내기 위해서는 SignUpRequest 객체 1개와 userService의 signUp에 대한 stub이 필요하다. 이러한 준비 작업을 해주면 given 단계에 다음과 같은 테스트 코드가 작성된다.

```java
@DisplayName("회원 가입 성공")
@Test
void signUpSuccess() throws Exception {
// given
    SignUpRequest request = signUpRequest();
    UserResponse response = userResponse();

    doReturn(response).when(userService)
        .signUp(any(SignUpRequest.class));
}

private SignUpRequest signUpRequest() {
    return SignUpRequest.builder()
        .email("test@test.test")
        .pw("test")
        .build();
}

private UserResponse userResponse() {
    return UserResponse.builder()
        .email("test@test.test")
        .pw("test")
        .role(UserRole.ROLE_USER)
        .build();
}
```

HTTP 요청을 보내면 Spring은 내부에서 MessageConverter를 사용해 Json String을 객체로 변환한다. 그런데 이것은 Spring 내부에서 진행되므로, 우리가 API로 전달되는 파라미터인 SignUpRequest를 조작할 수 없다. 그래서 SignUpRequest 클래스 타입이라면 어떠한 객체도 처리할 수 있도록 any()가 사용되었다. any()를 사용할 때에는 특정 클래스의 타입을 지정해주는 것이 좋다.

그 다음 when 단계에서는 mockMVC에 데이터와 함께 POST 요청을 보내야 한다. 요청 정보는 mockMvc의 perform에서 작성 가능한데, 요청 정보에는 MockMvcRequestBuilders가 사용되며 요청 메소드 종류, 내용, 파라미터 등을 설정할 수 있다.

보내는 데이터는 객체가 아닌 문자열이여야 하므로 별도의 변환이 필요하므로 Gson을 사용해 변환하였다.

```java
@DisplayName("회원 가입 성공")
@Test
void signUpSuccess() throws Exception {
// given
    SignUpRequest request = signUpRequest();
    UserResponse response = userResponse();

    doReturn(response).when(userService)
        .signUp(any(SignUpRequest.class));

// when
    ResultActions resultActions = mockMvc.perform(
        MockMvcRequestBuilders.post("/users/signUp")
                .contentType(MediaType.APPLICATION_JSON)
                .content(new Gson().toJson(request))
    );

}
```

마지막으로 호출된 결과를 검증하는 then 단계에서는 회원가입 API 호출 결과로 200 Response와 응답 결과를 검증해야 한다. 응답 검증 시에는 jsonPath를 이용해 해당 json 값이 존재하는지 확인하면 된다.

```java
@DisplayName("회원 가입 성공")
@Test
void signUpSuccess() throws Exception {
// given
    SignUpRequest request = signUpRequest();
    UserResponse response = userResponse();

    doReturn(response).when(userService)
        .signUp(any(SignUpRequest.class));

// when
    ResultActions resultActions = mockMvc.perform(
        MockMvcRequestBuilders.post("/users/signUp")
                .contentType(MediaType.APPLICATION_JSON)
                .content(new Gson().toJson(request))
    );

// then
    MvcResult mvcResult = resultActions.andExpect(status().isOk())
        .andExpect(jsonPath("email", response.getEmail()).exists())
        .andExpect(jsonPath("pw", response.getPw()).exists())
        .andExpect(jsonPath("role", response.getRole()).exists())
}
```

### **2. 사용자 목록 조회 테스트**

사용자 목록 조회의 given 단계에서는 UserService의 findAll에 대한 Stub이 필요하다. 그리고 when단계에서는 호출하는 HTTP 메소드를 GET으로, URL을 "/users/list"로 작성해주어야 한다. 마지막으로 then 단계에서는 HTTP Status가 OK이며, 주어진 데이터가 올바른지를 검증해야 하는데 이번에는 Json 응답을 객체로 변환하여 확인해보록 하자.

```java
@DisplayName("사용자 목록 조회")
@Test
void getUserList() throws Exception {
// given
    doReturn(userList()).when(userService)
        .findAll();

// when
    ResultActions resultActions = mockMvc.perform(
        MockMvcRequestBuilders.get("/user/list")
    );

// then
    MvcResult mvcResult = resultActions.andExpect(status().isOk()).andReturn();

    UserListResponseDTO response = new Gson().fromJson(mvcResult.getResponse().getContentAsString(), UserListResponseDTO.class);
    assertThat(response.getUserList().size()).isEqualTo(5);
}

private List<UserResponse> userList() {
    List<UserResponse> userList = new ArrayList<>();
    for (int i = 0; i < 5; i++) {
        userList.add(new UserResponse("test@test.test", "test", UserRole.ROLE_USER));
    }
    return userList;
}
```

### **@WebMvcTest**

위와 같이 MockMvc를 생성하는 등의 작업은 번거롭다. 다행히도 SpringBoot는 컨트롤러 테스트를 위한 @WebMvcTest 어노테이션을 제공하고 있다. 이를 이용하면 MockMvc 객체가 자동으로 생성될 뿐만 아니라 ControllerAdvice나 Filter, Interceptor 등 웹 계층 테스트에 필요한 요소들을 모두 빈으로 등록해 스프링 컨텍스트 환경을 구성한다. @WebMvcTest는 스프링부트가 제공하는 테스트 환경이므로 @Mock과 @Spy 대신 각각 @MockBean과 @SpyBean을 사용해주어야 한다.

```java
@WebMVcTest(UserController.class)
class UserControllerTest {

    @MockBean
    private UserService userService;

    @Autowired
    private MockMvc mockMvc;

// 테스트 작성

}
```

하지만 여기서 주의할 점이 있다. 스프링은 내부적으로 스프링 컨텍스트를 캐싱해두고 동일한 테스트 환경이라면 재사용한다. 그런데 특정 컨트롤러만을 빈으로 만들고 @MockBean과 @SpyBean으로 빈을 모킹하는 @WebMvcTest는 캐싱의 효과를 거의 얻지 못하고 새로운 컨텍스트의 생성을 필요로 한다. 그러므로 빠른 테스트를 원한다면 직접 MockMvc를 생성했던 처음의 방법을 사용하는 것이 좋을 수 있다.

## **3. Spring 서비스 계층 단위 테스트 작성 예시**

---

### **[ 사용자 회원가입/목록 조회 비지니스 로직 ]**

사용자 회원가입과 목록 조회를 위해서는 다음과 같은 비지니스 로직 레이어(Service Layer)가 필요하다.

```java
@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class UserServiceImpl {

    private final UserRepository userRepository;
    private final BCryptPasswordEncoder passwordEncoder;

    @Transactional
    public UserResponse signUp(final SignUpRequest request) {
        final User user = User.builder()
                .email(request.getEmail())
                .pw(passwordEncoder.encode(request.getPw()))
                .role(UserRole.ROLE_USER)
                .build();

        return UserResponse.of(userRepository.save(user));
    }

    public List<User> findAll() {
        return userRepository.findAll().stream()
            .map(UserResponse::of)
            .collect(Collectors.toList()));
    }
}
```

### **단위 테스트(Unit Test) 작성 준비**

앞서 설명하였듯 @ExtendWith(MockitoExtension.class)와 가짜 객체 주입을 사용해 다음과 같은 테스트 클래스를 작성할 수 있다.

```java
@ExtendWith(MockitoExtension.class)
class UserServiceTest {

    @InjectMocks
    private UserService userService;

    @Mock
    private UserRepository userRepository;

    @Spy
    private BCryptPasswordEncoder passwordEncoder;

}
```

이번에는 BCryptPasswordEncoder에 @Spy를 사용하였다. 앞서 설명하였듯 Spy는 Mock하지 않은 메소드는 실제 메소드로 동작하게 하는데, 위의 예제에서 실제로 사용자 비밀번호를 암호화해야 하므로, @Spy를 사용하였다. 이번에도 테스트 코드를 작성해보도록 하자.

1. 회원가입 성공
2. 사용자 목록 조회

### **1. 회원가입 성공 테스트**

```java
@DisplayName("회원 가입")
@Test
void signUp() {
// given
    BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
    SignUpRequest request = signUpRequest();
    String encryptedPw = encoder.encode(request.getPw());

    doReturn(new User(request.getEmail(), encryptedPw, UserRole.ROLE_USER)).when(userRepository)
        .save(any(User.class));

// when
    UserResponse user = userService.signUp(request);

// then
    assertThat(user.getEmail()).isEqualTo(request.getEmail());
    assertThat(encoder.matches(signUpDTO.getPw(), user.getPw())).isTrue();

// verify
    verify(userRepository, times(1)).save(any(User.class));
    verify(passwordEncoder, times(1)).encode(any(String.class));
}
```

이번에는 추가적으로 mockito의 verify()를 사용해보았다. verify는 Mock된 객체의 특정 메소드가 호출된 횟수를 검증할 수 있다. 위에서는 passwordEncoder의 encode 메소드와 userRepository의 save 메소드가 각각 1번만 호출되었는지를 검증하기 위해 사용하였다.

### **2. 사용자 목록 조회 테스트**

```java
@DisplayName("사용자 목록 조회")
@Test
void findAll() {
// given
    doReturn(userList()).when(userRepository)
        .findAll();

// when
    final List<UserResponse> userList = userService.findAll();

// then
    assertThat(userList.size()).isEqualTo(5);
}

private List<User> userList() {
    List<User> userList = new ArrayList<>();
    for (int i = 0; i < 5; i++) {
        userList.add(new User("test@test.test", "test", UserRole.ROLE_USER));
    }
    return userList;
}
```

## **4. Spring 레포지토리 계층 단위 테스트 작성 예시**

---

### **[ 사용자 추가/목록 조회 코드 ]**

사용자 회원가입과 목록 조회를 위한 JPA 레포지토리 인터페이스는 다음과 같이 구현되어 있다.

```java
public interface UserRepository extends JpaRepository <User, Long> {

}
```

이번에도 역시 다음과 같은 기능들에 대한 테스트 코드를 작성해보도록 하자.

1. 사용자 추가
2. 사용자 목록 조회

### **@DataJpaTest 어노테이션**

스프링 부트는 JPA 레포지토리를 손쉽게 테스트할 수 있는 @DataJpaTest 어노테이션을 제공하고 있다. @DataJpaTest를 사용하면 기본적으로 인메모리 데이터베이스인 H2를 기반으로 테스트용 데이터베이스를 구축하며, 테스트가 끝나면 트랜잭션 롤백을 해준다. 레포지토리 계층은 실제 DB와 통신없이 단순 모킹하는 것은 의미가 없으므로 직접 데이터베이스와 통신하는 @DataJpaTest를 사용하도록 하자.

### **1. 사용자 추가 테스트**

```java
@DataJpaTest
class UserRepositoryTest {

    @Autowired
    private UserRepository userRepository;

    @DisplayName("사용자 추가")
    @Test
    void addUser() {
// given
        User user = user();

// when
        User savedUser = userRepository.save(user);

// then
        assertThat(savedUser.getEmail()).isEqualTo(user.getEmail());
        assertThat(savedUser.getPw()).isEqualTo(user.getPw());
        assertThat(savedUser.getRole()).isEqualTo(user.getRole());
    }

    private User user() {
        return User.builder()
                .email("email")
                .pw("pw")
                .role(UserRole.ROLE_USER).build();
    }
}
```

### **2. 사용자 목록 조회 테스트**

```java
@DataJpaTest
class UserRepositoryTest {

    @Autowired
    private UserRepository userRepository;

    @DisplayName("사용자 목록 조회")
    @Test
    void addUser() {
// given
        userRepository.save(user());

// when
        List<User> userList = userRepository.findAll();

// then
        assertThat(userList.size()).isEqualTo(1);
    }
}
```

지금까지 Spring 기반의 애플리케이션 코드에 대해 계층 별로 단위 테스트를 작성하는 방법을 알아보았다. 테스트를 작성할 때 중요한 점은  성공 테스트보만 작성하는 것이 아니라 실패 테스트까지 작성해주어야 한다.

또한 요즘 널리 알려진 개발 방법론 중 하나인 TDD(Test-Driven Development, 테스트 주도 개발)은 테스트 코드를 먼저 작성하고, 실제 코드가 나오는 것이다. TDD로 개발하는 방법은 [이 포스팅](https://mangkyu.tistory.com/182)을 참고하도록 하자.
