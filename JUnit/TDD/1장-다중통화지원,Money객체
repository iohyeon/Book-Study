테스트 주도 개발 - Test-Driven Development :By Example
1장. ****다중 통화를 지원하는 Money객체****

<aside>
💡   1. TDD의 순서 말하기
  2. 오퍼레이션이란 무엇인가
  3. 스텁이란 무엇인가
  4. 리팩토링의 의미는 무엇인가

</aside>

## [TDD]테스트 순서

- 작은 테스트를 하나 추가한다.
- 모든 테스트를 실행해서 테스트가 실패하는 것을 확인한다.
- 코드가 테스트를 통과할 수 있게 조금 수정한다.
- 모든 테스트를 실행해서 테스트가 성공하는 것을 확인한다.
- 중복을 제거하기 위해 리팩토링을 한다.

## 작업 순서 검토

- 우리가 알고 있는 작업해야 할 테스트 목록을 만든다.
- 오퍼레이션이 외부에서 어떻게 보이길 원하는지 말해주는 이야기를 코드로 표현한다
- JUnit에 대한 상세한 사항들은 잠시 무시하기로 했다.
- 스텁 구현을 통해 테스트를 컴파일 한다
- 끔찍한 죄악을 범하여 테스트를 통과시킨다
- 돌아가는 코드에서 상수를 변수로 변경하여 점진적으로 일반화 한다
- 새로운 할일들을 한번에 처리하는 대신 할일 목록에 추가하고 넘어간다

보면서 오퍼레이션에 대한 개념을 알게되었다.

> 오퍼레이션
> 
> 
> 설명 글에서는 메서드와 비슷한 의미로 객체가 수행할 수 있는 연산을 의미한다고 한다. 그냥 동작이라고 생각해도 무방할 것 같다.
> 

## **테스트 대상 찾기**

테스트 대상을 선택할 때 오퍼레이션이 외부에서 어떤 식으로 보일지에 대해서 생각해봐야한다.

책에서는 화폐를 예로들어 TDD를 수행하는 과정들을 소개해준다.

그 중 메서드는 스텁 구현을 통해서 처리를 우선적으로 하는 부분이 매력적이다.

### **스텁 구현**

스텁 구현은 메서드의 서명부와 반환 명령만 적는 식이라고 한다. 그래서 이 메서드를 호출하는 코드는 컴파일이 될 수 있도록 껍데기만 만들어두는 것이라고 한다.

그 전까지는 스텁이라는게 그냥 목킹이라고 생각했는데, 약간 차이가 있나보다.

### **리팩토링**

리펙토링 등장하게 되는데, 리팩토링이란게 단순하게 기존 코드를 좋은 코드로 수정한다라고 알고 있었는데, 정확한 의미는 코드의 외적 행위는 그대로 유지하면서 내부 구조를 바꾸는 작업을 말한다고 한다.

## **의존성과 중복**

TDD를 하면서 항상 의문이 들었던 건 `어떤 중복을 제거`하고 서로 의존하는 부분을 `어떻게 제거`하는가가 많은 고민이였다.

일단 내가 할 수 있는 부분은 `중복`만 `제거`해주면 `의존성 일부`도 `제거`해준다고 하니 중복을 어떻게 어떤 부분을 어떻게 제거해야되는지 많이 생각해볼 필요가 있다.

> 중복이라고 함은 보통 코드가 동일한 부분을 찾게 되는데, 그게 아니라 의미적으로 어떤 부분이 다른 걸로 대체될 수 있다고 하면 중복이라고 인식해도 좋을 것 같다.


정리
테스트코드를 작성하면서 의존성과 중복제거에 대한 부분에 대해 고민이 많았는데 이 책을 통해 내가 할 수 있는 부분인 중복만 제거하면 의존성 일부도 제거 해준다고 한다. 
하지만 정확히 이해를 한건 아니라서 많이 생각해볼 필요가 있을 것 같다. 그리고 테스트 순서에 대한 설명과 테스트 목록을 만들고 돌아가는 코드를 작성까지 진행하면서 테스트 순서와 내용을 쉽게 파악할 수 있었고 앞으로 TDD 적용에 다음과 같은 순서를 지키려고 노력해야겠다는 생각을 했다.
