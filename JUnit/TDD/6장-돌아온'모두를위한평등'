테스트 주도 개발 - Test-Driven Development :By Example
# 6장. ****돌아온 '모두를 위한 평등'****

<aside>
💡

</aside>

중복을 제거하기 위해 떠오르는 가장 좋은 방법은 Money라는 공통 상위 클래스를 작성하는 것이다. 그리고 Money에 공통의 equals() 코드를 갖게 하면 중복을 해결할 수 있을 것이다. 우리는 Money 클래스를 만들고, amount를 Dollar와 Franc에서 Money로 옮길 수 있다. 그리고 접근 제어를 위해 Money의 amount를 protected로 바꿀 수 있다.

```java
public class Money {

    public boolean equals(Object object) {
				Money money = (Money) Object;
        return amount == Money.amount;
    }
}
```

그리고 이제 Dollar와 Franc의 equals()를 손봐야한다. 먼저 Dollar의 equals를 Money 객체끼리 비교하도록 수정할 수 있을 것이고, 이 역시 Money 클래스로 옮길 수 있다. 이렇게 작성된 Money 클래스는 다음과 같을 것이다.

```java
public class Money {

    protected int amount;

    Money(int amount) {
        this.amount = amount;
    }

    public boolean equals(Object object) {
        return this.amount == ((Money)object).amount;
    }
}
```

이후에 Franc 클래스에서 amount 변수와 equals 함수를 제거하면 중복이 제거된다. 하지만 우리는 Franc의 equals에 대한 테스트를 진행하지 않았다. 이를 진행하기 위해 동치성 테스트 코드를 추가하면 다음과 같다.

일단 동치성 테스트가 Franc끼리의 비교에 대해서는 다루지 않는다 점에 주목하자. 

```java
public void testEquality() {
    assertTrue(new Dollar(5).equals(new Dollar(5)));
    assertFalse(new Dollar(5).equals(new Dollar(6)));
    assertTrue(new Franc(5).equals(new Franc(5)));
    assertFalse(new Franc(5).equals(new Franc(6)));
}
```

하지만 위의 테스트 코드는 2줄이나 중복되었다. 이에 대해서도 추후에 해결이 필요할 것이다.

이제 Franc에서 중복되는 코드들을 제거하면 중복 제거가 다 되었다. 그리고 테스트를 돌리면 잘 돌아갈 것이다.

하지만 Dollar와 Franc을 비교하면 어떻게 될까? 우리는 이 문제에 대해서도 해결해야 한다.

### 내용검토

- 공통된 코드를 첫 번째 클래스(Dollar)에서 상위 클래스(Money)로 단계쩍으로 옮겼다.
- 두 번째 클래스(Franc)도 Money의 하위 클래스로 만들었다.
- 불필요한 구현을 제거하기 전에 두 equals() 구현을 일치시켰다.
